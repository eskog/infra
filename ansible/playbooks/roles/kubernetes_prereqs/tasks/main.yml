---
- name: Detect operating system
  ansible.builtin.set_fact:
    is_debian: "{{ ansible_os_family == 'Debian' }}"
    is_rhel: "{{ ansible_os_family == 'RedHat' }}"

- name: Install required packages (Debian)
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
    state: present
  when: is_debian

- name: Install required packages (RHEL)
  ansible.builtin.dnf:
    name:
      - yum-utils
      - device-mapper-persistent-data
      - lvm2
      - tar
      - nfs-utils
    state: present
  when: is_rhel

- name: Check if swap is enabled
  ansible.builtin.command: swapon --show
  register: swap_status
  changed_when: false  # Don't mark the task as changed
  failed_when: false   # Allow it to proceed even if no swap is enabled

- name: Disable swap if it is enabled
  ansible.builtin.command: swapoff -a
  when: swap_status.stdout != ""

- name: Disable SWAP in fstab
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: "^([^#].*\\sswap\\s+.*)$"
    replace: "# \\1"

- name: Ensure dnf-plugins-core is installed
  ansible.builtin.dnf:
    name: dnf-plugins-core
    state: present

- name: Add Docker CE repository
  ansible.builtin.command: >
    dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
  args:
    creates: /etc/yum.repos.d/docker-ce.repo

- name: Install containerd.io and runc
  ansible.builtin.dnf:
    name:
      - containerd.io
      - runc
    state: present

- name: Create Containerd directory
  ansible.builtin.file:
    path: /etc/containerd
    state: directory
    mode: "640"

- name: Add Containerd configuration
  ansible.builtin.shell: /usr/bin/containerd config default > /etc/containerd/config.toml

- name: Configuring the systemd cgroup driver for Containerd
  ansible.builtin.lineinfile:
    path: /etc/containerd/config.toml
    regexp: '            SystemdCgroup = false'
    line: '            SystemdCgroup = true'

- name: Enable the Containerd service and start it
  ansible.builtin.systemd:
    name: containerd
    state: restarted
    enabled: true
    daemon-reload: true

- name: Add modules
  community.general.modprobe:
    name: "{{ item }}"
    state: present
    persistent: present
  with_items:
    - overlay
    - br_netfilter

- name: Add config file for k8s
  ansible.builtin.lineinfile:
    create: true
    path: /etc/sysctl.d/kubernetes.conf
    line: "{{ item }}"
    mode: '644'
    state: present
  with_items:
    - "net.bridge.bridge-nf-call-ip6tables = 1"
    - "net.bridge.bridge-nf-call-iptables = 1"
    - "net.ipv4.ip_forward = 1"
  register: config_file_status

- name: Sysctl net settings
  ansible.posix.sysctl:
    name: "{{ item }}"
    value: 1
  with_items:
    - "net.bridge.bridge-nf-call-iptables"
    - "net.ipv4.ip_forward"
  notify: Reload sysctl

- name: Add Kubernetes repository signed-key (Debian)
  ansible.builtin.get_url:
    url: https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key
    dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
    mode: "0640"
    force: true
  when: is_debian

- name: Add Kubernetes repository (Debian)
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /"
    state: present
    update_cache: true
  when: is_debian

- name: Add Kubernetes repository (RHEL)
  ansible.builtin.yum_repository:
    name: kubernetes
    description: Kubernetes Repo
    baseurl: https://pkgs.k8s.io/core:/stable:/v1.30/rpm/
    gpgcheck: true
    gpgkey: https://pkgs.k8s.io/core:/stable:/v1.30/rpm/repodata/repomd.xml.key
    enabled: true
  when: is_rhel

- name: Install Kubernetes packages
  ansible.builtin.package:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    update_cache: true

- name: Enable and start kubelet service
  ansible.builtin.systemd:
    name: kubelet
    enabled: true
    state: started

# - name: Reboot
#   ansible.builtin.reboot:
#     test_command: whoami

- name: Open firewall for cilium
  ansible.posix.firewalld:
    port: "{{ item }}"
    permanent: true
    state: enabled
    immediate: true
  loop:
    - 30000-32767/tcp
    - 10250/tcp
    - 4789/udp
    - 4240/tcp
    - 4244/tcp
    - 4245/tcp
    - 4250/tcp
    - 4251/tcp
    - 6060/tcp
    - 6061/tcp
    - 6062/tcp
    - 9878/tcp
    - 9879/tcp
    - 9890/tcp
    - 9891/tcp
    - 9893/tcp
    - 9901/tcp
    - 9962/tcp
    - 9963/tcp
    - 9964/tcp
    - 51871/udp
    - 8472/udp
    - 4240/tcp
    - 8472/udp
    - 4240/tcp
    - 2379-2380/tcp

  when: ansible_facts['os_family'] == 'RedHat'